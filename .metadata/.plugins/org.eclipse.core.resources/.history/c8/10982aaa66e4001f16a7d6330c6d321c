package com.employee.service;

import java.util.List;
import java.util.Optional;
import java.util.Random;
import java.util.stream.Collectors;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.employee.dto.EmployeeRequest;
import com.employee.dto.EmployeeResponse;
import com.employee.model.Employee;
import com.employee.repository.EmployeeRepository;

import io.micrometer.common.util.StringUtils;

@Service
public class EmployeeServiceImpl implements EmployeeService {

	@Autowired
	EmployeeRepository employeeRepository;

	@Override
	public EmployeeResponse createEmployee(EmployeeRequest employeeRequest) {
		Employee response = employeeRepository.save(convertEmpDtoToEntity(employeeRequest));
		if (response == null) {
			return null;
		}
		return convertEmpReponseToDto(response);
	}

	private EmployeeResponse convertEmpReponseToDto(Employee response) {
		EmployeeResponse empResponse = new EmployeeResponse();
		empResponse.setEmpId(response.getEmpId());
		empResponse.setMessage("Successfully saved");
		return empResponse;
	}

	private Employee convertEmpDtoToEntity(EmployeeRequest employeeRequest) {
		Employee employee = new Employee();
		employee.setName(employeeRequest.getName());
		employee.setAge(employeeRequest.getAge());
		employee.setEmailId(employeeRequest.getEmailId());
		employee.setEmpId(generateEmpId());
		employee.setGender(employeeRequest.getGender());
		employee.setMobileNumber(employeeRequest.getMobileNumber());
		employee.setPassword(employeeRequest.getPassword());
		employee.setStatus("ACTIVE");
		return employee;
	}

	private String generateEmpId() {
		Random random = new Random();
		int num = random.nextInt(1111, 9999);
		String employeeId = "JKDF" + num;
		return employeeId;
	}

	@Override
	public List<Employee> getAllEmployees(String activeTag) {
		List<Employee> results = null;

		if (StringUtils.isNotBlank(activeTag)) {
			if ("Y".equals(activeTag)) {
				results = employeeRepository.findAll().stream().filter(emp -> emp.getStatus().equals("ACTIVE"))
						.collect(Collectors.toList());
			} else if ("N".equals(activeTag)) {
				results = employeeRepository.findAll().stream().filter(emp -> emp.getStatus().equals("INACTIVE"))
						.collect(Collectors.toList());
			}
		} else {
			results = employeeRepository.findAll();
		}
		if (results == null || results.isEmpty()) {
			throw new RuntimeException("No records found");
		}
		return results;
	}

	@Override
	public Employee getEmployeeById(String employeeId) {
		//Optional<Employee> response = employeeRepository.findById(primaryKeyValue);
		Optional<Employee> response =employeeRepository.findByEmpId(employeeId);
		if(!response.isPresent()) {
			throw new RuntimeException("No records found for emp id");
		}
		return response.get();
	}

	@Override
	public String updateEmployee(EmployeeRequest employeeRequest, String empId) {

		return null;
	}
}
